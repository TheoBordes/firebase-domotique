/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 21.10.2024 23:45:00

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1744;
#else
constexpr int kTensorArenaSize = 720;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,375 } };
const TfArray<1, float> quant0_scale = { 1, { 0.072156861424446106, } };
const TfArray<1, int> quant0_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[5] = { -34, -21, 28, 42, 23, };
const TfArray<1, int> tensor_dimension1 = { 1, { 5 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00072222313610836864, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[5*10] = { 
  47, -21, -88, 60, -115, -1, 63, -76, 51, 12, 
  65, 102, 13, 7, -97, 115, -40, 55, 88, 54, 
  -97, -20, -53, -88, -94, 75, 127, 18, 52, 48, 
  -13, 119, -112, 92, -45, -20, -54, -72, -20, -51, 
  89, -92, -111, 27, -114, 32, 70, -116, -5, 84, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 5,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0051701790653169155, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[10] = { -23, -13, 4, -5, 67, -17, 19, -13, -25, -17, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00066940562101081014, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[10*20] = { 
  35, -82, -78, 14, 99, 11, 117, -101, -6, -62, 26, 17, 67, 119, 60, -94, 0, -34, -80, 24, 
  -61, -121, 70, 71, 54, -45, -57, -104, -98, 17, -55, -58, 66, 22, 72, 92, -53, 34, -50, -34, 
  -24, -101, -5, 111, -48, -65, -40, 20, -43, -12, 35, 64, -21, -91, -15, -72, 89, -98, -106, -85, 
  47, 15, 108, 5, -77, 82, -58, -40, -30, 75, 122, 47, -77, -101, 3, -55, -28, -59, 107, 87, 
  -62, 64, -85, -44, -85, 82, -26, 46, -98, 64, 116, 58, -20, 51, 45, -101, -51, 107, 72, 59, 
  -95, 74, -78, 54, -29, -127, -13, 78, -123, -50, 76, 62, -55, 66, -30, -73, -39, 63, -74, 4, 
  114, 49, -66, -84, 92, 91, 16, -46, -28, 15, 48, 47, -75, -42, 4, -12, 63, -14, -10, -35, 
  -4, 95, 48, 64, -16, 89, 90, -120, 121, -27, -60, 117, 69, -30, -109, 50, 91, 4, 12, 87, 
  55, 42, 53, 42, 86, 31, -124, -35, -31, 6, 88, 20, -6, -112, -44, 96, -92, 72, -55, -37, 
  51, -77, -26, -3, 80, 105, -27, 6, 82, -114, -74, 53, -80, -58, 55, -25, -19, 92, -5, 80, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0036174252163618803, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[20] = { 215, -59, -72, -49, 39, 38, 73, 72, 0, 93, 137, -97, -50, -31, 110, -5, 0, -88, 27, -103, };
const TfArray<1, int> tensor_dimension5 = { 1, { 20 } };
const TfArray<1, float> quant5_scale = { 1, { 8.6342086433432996e-05, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[20*375] = { 
  -23, -29, -1, 61, 14, 71, 6, -80, 55, -104, -18, 58, -112, -81, 0, 67, 10, 95, -72, -64, 109, -49, 69, 39, -116, 49, -28, -73, -85, -70, 2, 15, 82, -107, -109, 65, -86, 57, 12, -88, 30, 13, -99, -46, -66, 61, -51, 110, -89, -88, 4, -117, 25, -1, -108, 49, 117, 53, 85, 81, 16, -56, 32, -94, -31, -50, -21, 17, 107, -36, 9, -65, -85, -42, 0, -78, 55, 68, -36, 68, 50, -26, -32, 52, -43, -3, -81, -35, -92, -73, 12, -39, -30, 62, -26, -75, 74, 38, -55, -62, -22, -81, -3, 36, -6, -64, -54, 25, -79, -64, 101, 6, -12, 86, -74, 78, -24, 11, -116, 53, 24, -13, 43, 70, -116, 3, 40, -10, 102, -38, -103, -38, 71, 13, 103, -77, -11, 120, -47, -12, 71, -25, -83, -42, -62, -37, -2, 26, -75, -31, -67, 43, -5, 35, 15, -16, 53, 7, -79, -26, 20, 98, -80, -58, -14, -67, -89, -52, 40, 68, -34, -43, -42, -11, -40, 59, 77, 28, -82, -52, -12, 19, -69, -91, -9, 58, -70, -112, 79, -23, 78, -47, -7, 84, 74, 18, -80, 96, -114, -22, -12, 37, 75, 53, 7, -79, 89, -77, 21, 95, 71, 43, 3, -59, -47, 4, -51, -64, -5, -77, 20, 82, 20, -101, 109, -95, -44, -30, -121, 85, -3, -113, -59, -13, -112, -86, 107, -4, 63, 105, -65, -79, 69, -83, 59, 101, -78, -12, -22, 69, 17, 87, -39, 27, -74, -75, -21, 58, -72, 16, 31, 62, -66, 41, -32, 66, 12, 54, 59, 112, 30, -56, 5, -34, -32, -77, -110, 25, 0, -78, 74, -38, -9, -52, -40, -27, -85, -17, -60, -44, 1, 80, 2, -27, 59, 20, 9, -42, -4, 98, -19, 38, 45, -122, 34, -19, 70, -114, 57, 16, -48, -79, -37, -47, 20, -24, -23, -37, -24, -108, 59, -67, -14, 40, -3, -106, 4, 1, -20, -11, -62, 11, -69, -64, -25, 100, -38, 72, -67, -103, -103, -54, 11, 14, -18, 11, -81, 2, 1, -60, 96, 71, -91, -79, 6, -12, 11, -72, 40, 22, -43, -44, 76, 70, 28, 13, -90, 16, -24, 63, 3, -27, 27, 48, 24, 
  -104, -11, 79, 8, -34, 13, 28, 26, 40, 89, -69, 38, 9, 14, 58, -59, 75, 46, 98, -65, -21, -14, 79, -24, 47, 45, -22, 69, -29, -79, -20, 90, 83, 94, 65, -36, -85, -14, 22, -50, -47, -60, 95, 67, 54, -31, 71, -75, 4, -4, -97, -16, -1, -42, -18, -107, -101, 76, 80, -86, -22, 65, -45, -22, -29, -3, 72, -105, 51, -31, 87, -62, 56, -11, 10, 79, -36, -62, -11, 86, -18, -106, -56, -5, 42, 3, -25, -78, 15, -29, 27, 27, 87, 19, 1, 53, -52, -88, 13, -94, 18, 92, -5, -19, -75, 43, 70, -69, -23, -23, -34, -93, 96, 26, -33, 85, 22, 16, -80, -75, 21, -99, -36, -57, 43, -13, -7, 35, -88, 90, -40, -34, 59, -35, 91, 58, -68, -36, -20, 59, -101, 10, -15, -49, -1, 59, 58, 44, -44, -64, -51, -40, -51, -43, -43, 67, 58, 88, -75, -52, -64, -87, 51, -51, -88, -37, -81, 12, -93, -30, -25, -68, 38, -39, -21, 62, 49, -37, -59, -65, -83, 20, 31, 27, -27, 74, -12, -23, 58, 93, 75, 38, 69, 83, -19, 17, -63, -92, -92, 84, 68, -41, -89, 5, -63, 6, 51, 84, 44, 65, -62, -23, -6, -15, -82, 1, 26, 30, -11, -78, -89, -90, 36, -49, 29, 80, -31, -28, -48, -88, 96, 68, 75, 49, -68, -63, 1, -11, -17, -3, -98, 52, 16, 96, -15, -22, -10, -86, 26, 78, 36, -64, 4, 20, 98, 30, -40, -13, -84, 52, -106, -39, 84, -71, 56, -38, -103, -23, 84, -92, -63, -33, 55, 46, 93, -94, 61, -6, 28, -15, -72, -64, 11, 27, 26, -39, 37, -105, 93, -87, 14, -43, -32, 21, -30, -5, -30, 3, 49, 2, 84, -2, -40, -11, 8, -26, -62, -37, -97, 30, 17, 64, 81, -94, 87, -38, 70, 93, 12, 6, -32, 84, 22, -96, 75, -14, 17, -42, 63, -20, -52, -41, -18, 93, 58, 86, -43, 8, 71, -74, 78, 66, -16, 39, 18, 32, 14, -80, -81, -97, 96, 44, 71, 32, 74, -43, -36, -103, -84, -28, -94, 26, 90, 51, -47, 96, 26, 86, -99, -44, -62, -7, 49, 34, -24, 
  53, 1, -94, -85, 59, -60, 49, 100, 90, -22, -62, 10, -87, 64, -66, 57, 48, 53, -12, 58, 94, -108, 71, -87, -1, -11, 90, 37, -38, -86, -65, 81, 45, -86, -5, -40, -100, 8, 52, -91, 66, 46, -108, -2, 30, -32, -38, -88, 23, -12, 45, -36, -4, -9, 40, -69, 4, 0, 26, -35, 80, -20, -23, 4, -13, 52, 8, -43, -38, -47, 9, -106, -6, 101, -24, -100, -71, 48, -63, -46, 35, -69, 51, -10, -5, 32, -32, -15, -66, -7, -85, 99, 16, -49, 116, 62, 19, 65, 29, 16, -83, -94, -65, -58, 39, -53, 104, 65, -4, -3, -55, 39, 22, -88, -76, -69, 41, 90, -8, 37, -65, 97, 95, -111, 104, 78, 13, 82, -92, -19, 72, -69, 6, 65, 44, 36, -35, 68, 47, 50, -21, 76, 108, 85, -96, 16, -92, -3, -22, 6, 30, -38, -41, -3, 55, 93, 44, -18, 73, -88, 24, 65, 9, 105, -11, -74, -29, -24, -50, 0, -87, -43, 19, -104, -46, 33, 54, -62, -37, -97, 48, -66, -9, 81, -42, 7, 39, -1, 39, -80, 24, 21, -48, 96, -6, -83, 37, -91, -86, 14, 86, -18, 32, -35, -99, -65, 21, -3, -82, 79, 61, -87, -44, -50, 77, 32, -104, 85, 81, -111, 5, 13, 38, -32, -70, -5, 24, -106, -85, -7, -4, 24, -25, 11, 87, 12, 57, -1, 85, -71, -83, 107, -100, -42, 38, -99, -4, 12, 81, -49, 38, 50, 72, -28, 53, -62, -70, 78, -116, -64, 33, -85, 24, -91, -61, 86, 60, -58, 53, 28, 24, 52, 61, -27, 20, -1, -42, -22, -76, -63, 77, -59, -59, 44, -68, -13, 35, -77, 46, -84, -45, -98, 112, 93, 73, -13, 72, -62, 75, -79, 63, 81, 23, -86, 7, -56, -9, -20, 86, 3, -39, 73, -75, 29, 79, -18, 111, 95, -29, 98, -3, -96, 18, 90, 58, 106, -109, 3, -46, 36, 21, 36, 16, -54, -30, 39, -78, -17, -19, -60, 102, 82, -33, -50, 75, 72, 54, -93, 42, 104, 32, -3, 92, -95, -75, -33, -61, 31, 100, -77, -87, -20, 1, 89, -37, 88, -39, -72, -41, -74, 25, -25, -105, -44, -29, 
  -88, 50, -57, 57, -12, 56, -13, 95, 47, -90, 79, 78, 46, 59, 40, -26, -81, -53, 30, 61, -70, 38, -69, -42, 58, 48, -76, 57, 81, 62, -49, 38, 81, -49, 58, 9, 96, -101, 16, 66, -87, 58, -2, 75, 94, -82, -8, -68, 57, 43, -70, -7, -24, -106, 21, -82, -91, -104, -45, -15, 88, 31, 92, 69, -71, -95, 54, -91, -68, -97, 55, -57, -59, -76, 18, 31, -29, 99, 33, 95, 17, 62, 67, -35, -23, -86, -12, -43, 58, -45, 37, 31, -87, 9, 80, -42, -64, -24, 76, -28, -37, -12, 78, -63, -52, -9, 9, -31, 15, 25, -89, 12, -7, 71, 3, 88, -95, 1, 67, -9, -98, 78, 0, 29, -89, 1, -5, -65, 21, 29, -42, -95, -30, 85, -23, -54, -71, 18, 5, 66, 58, 64, 22, -42, 15, 19, -46, -73, -38, -80, -30, -68, 78, 87, -69, 31, 33, 96, -60, -88, -38, 41, 80, 58, -57, 24, -38, -74, 34, 12, -100, -48, -4, -93, 56, 42, 31, 42, 69, -105, -28, 69, 83, 76, -5, -103, -18, 60, 3, -61, -18, -84, 0, -65, 0, 92, -46, -73, -65, -48, -52, -26, -67, -45, 2, -11, 3, 64, 91, -4, -10, 85, -10, -25, -30, -43, -95, -8, -85, -70, 94, 28, 71, -33, 97, -101, 71, -100, -57, 17, -3, 93, -100, 85, -71, 24, -43, -14, 81, 89, -8, 30, 73, -94, -92, -34, 6, 15, -104, -40, -99, 31, -30, -98, -2, -42, -74, 84, 86, 40, -25, -69, 45, -49, -79, -19, 47, -62, -15, -65, 32, 92, 18, -61, -81, -24, 63, -38, -43, 5, 91, 99, 46, 17, 91, -66, 73, -67, -67, -11, -54, -76, -100, 65, -28, -66, 26, -52, -42, 27, -38, -30, -8, -102, 3, -4, 22, -18, 83, -44, 37, 33, 28, 58, 87, 29, 65, -60, -78, -86, -55, -70, -73, -90, -14, -57, 24, -82, -60, 59, 89, 64, 18, -9, 4, 89, 40, 95, 21, -57, 25, -64, -65, 36, 19, -5, -21, -92, -80, -37, 36, -101, -28, 41, 4, 49, 0, -32, 41, -83, 31, 14, -78, -4, 27, 17, 60, -51, -68, 72, 20, 12, -8, 75, 96, 
  81, 18, 19, -66, -84, -74, 83, -28, -45, 58, -33, 21, -66, -48, -68, 53, 56, 70, -11, -27, -9, 91, -24, -14, -35, 1, 76, 67, -97, -78, 44, -69, 93, -75, -36, -47, -34, -97, 24, 57, 7, 33, -91, -40, 59, -66, 71, 64, -22, 65, 67, 72, -82, -23, -30, 94, 68, 76, 86, 62, -89, -85, 95, 92, 2, 60, -46, 97, -97, -27, -91, 30, 68, 32, 44, 45, -37, -25, -52, -43, 78, -100, 47, -69, 32, -62, 24, -75, 64, -34, -40, 1, 28, 64, 26, 6, 17, -26, -73, -82, -25, -87, 21, -33, 94, -55, -100, -22, -71, 29, -63, -7, -64, -1, 35, -13, -36, -72, -58, -10, 89, -32, -57, -14, -90, 9, 93, -82, -44, 39, -35, -15, 38, -21, -21, -26, 49, 55, -96, 69, 34, 13, 61, 13, 66, -101, 81, 16, -90, -87, -15, 45, -33, -70, 43, 104, 77, -59, 93, -78, -42, 67, -95, -26, -96, -70, 16, -33, 90, -34, -24, -97, -83, 60, 52, 11, -37, 51, -37, 34, -46, 3, 36, 29, 21, -79, -54, -71, 82, -67, 80, -38, 37, -66, -40, 74, -11, -19, 0, -65, -67, 93, 9, -89, -75, -94, -17, -17, -58, 10, 79, 49, 32, 31, 75, 26, -20, -99, 52, 50, 13, -21, 20, -29, -53, 69, -1, 82, -43, -34, -53, -31, 39, -34, 91, -67, -41, 100, -39, -44, 99, 76, -86, -84, 64, -54, 54, -25, 101, -100, 90, -93, 41, -103, 10, 98, 64, -10, 49, 12, 2, 87, -87, 70, 63, 69, -83, 85, -44, 94, 24, -58, -48, 54, -71, -5, 20, -44, 50, 40, 87, 24, 18, -17, 45, -9, -26, 29, 58, -105, 45, 24, -77, -63, 69, -36, -79, 37, -64, -99, 22, -41, -15, 40, -3, 0, -89, 60, -57, -53, -65, -81, -33, -20, -2, 69, 34, 25, 79, -104, -79, 5, 60, 39, -42, 37, -76, -20, 99, -56, -33, 76, -89, 74, -36, -88, -63, 92, -9, 84, 20, -59, -26, -70, 102, -20, -27, -61, 74, 73, -48, -102, -105, -99, 99, -47, 80, -90, -58, -61, -97, -32, -67, -52, -11, 91, -104, -52, 8, -82, -54, -30, -74, -96, -10, 
  -39, 67, 28, -13, -44, -70, 1, 92, -29, 14, -104, -26, -109, 38, 28, -10, -101, 39, -40, -1, -69, -93, -19, -41, 66, -36, 38, -23, -57, 111, -28, -20, 89, -71, 14, -84, 61, -68, 52, 80, 61, 49, -79, -37, 28, -109, -85, -58, -12, 56, 100, -23, 25, -31, 36, 52, 45, -21, 48, 18, 18, -106, 77, -89, -37, 10, -46, 72, 98, 37, 86, -36, 61, -84, -91, -74, -21, -5, 56, -9, -69, 29, -60, 91, -17, -87, 40, -15, 91, -8, 4, -2, -52, 70, -5, 1, -21, 24, 9, 54, -23, 41, 74, -68, 33, 8, 90, -57, 26, 47, 0, -17, 21, 69, 63, 10, 60, -88, 18, -53, -109, 47, -68, 6, -5, 105, -25, -48, -39, -100, -1, 44, -73, -45, 30, 81, 36, -68, 70, 85, 66, -11, -9, -47, 7, -66, 100, 85, 79, -38, 69, 17, 46, -101, 62, 3, -40, 69, -30, -15, 49, -90, 43, -92, 77, -108, 89, -46, 48, 0, 5, 76, -95, 12, -93, 18, -69, -38, 90, 59, 76, 25, -88, -86, -24, -46, -5, -60, 111, -94, -62, 111, 42, 3, 35, -76, 83, 4, 64, -3, -1, 29, 61, 74, -100, -87, -67, -42, 9, 77, 33, -47, -30, -49, 54, -75, -74, 78, 32, -108, -73, 111, -43, -62, 88, 25, -104, -16, -81, 69, -3, 66, 37, -34, -100, 4, 36, -24, -62, -36, 64, -101, 34, 9, 27, 47, 82, 27, -35, 3, 32, -20, 32, -40, 20, -108, 3, -86, 49, -14, -70, 44, -46, -34, -21, 93, -86, 86, 36, 28, 2, -94, 93, -60, -1, 65, -32, 6, 107, -51, -78, 63, -103, 28, 43, -9, -61, -74, -15, 9, 40, 7, -87, 1, -20, 74, -73, 89, -101, -56, -92, -98, 112, 7, -45, -52, -111, -55, -60, -38, 92, 112, -9, 7, -58, 74, -37, 101, -14, 23, 58, -91, 59, 95, 67, 92, -1, -86, -13, 47, 23, -30, 72, 51, 75, 47, -13, -94, 66, -106, -21, 55, 2, -93, -66, -41, 89, -24, 84, 76, -3, 32, 34, 102, -7, -76, -13, -95, -112, 90, -24, -53, -4, -85, 47, 19, 9, -13, -20, 9, 28, 98, -68, 52, 96, 
  37, -23, -30, -69, -57, -93, -46, 78, -29, -4, 2, -1, -12, 65, 47, -29, -35, -45, 87, 85, -42, 7, -40, 72, -53, -4, 109, -97, 88, 33, 55, -89, 8, -25, -73, 66, -105, 48, -76, 89, -5, 29, -21, 11, -44, -100, 105, -48, -23, -15, -61, 71, -82, 69, 20, -5, 15, 72, 62, -30, -76, 17, 79, -75, 55, 33, -104, 71, -69, -68, 23, 97, -43, 53, 36, 48, 54, 87, 32, -39, 83, 50, 11, 37, -71, -23, 70, 13, -41, -37, -86, 70, -34, 81, -26, -92, -61, -55, -84, -23, -55, -52, -8, -22, 104, -29, -8, -62, -68, 1, 2, 42, 73, -94, 12, -17, 63, -53, -80, -29, -67, 28, -78, -12, -32, -76, -22, 50, -22, -98, 49, -89, -22, 54, 75, 68, -77, 52, 58, 107, 45, 47, -35, -96, -88, 17, 77, -103, 85, 71, -83, 91, -1, 73, -35, -87, 5, -36, 73, -64, 103, 42, -34, -66, 70, -56, -34, 63, 59, 26, -95, 60, 71, 109, 33, -79, -92, -55, 43, -16, 58, -29, 95, -8, -38, -87, 42, -79, -71, -104, 63, -55, 55, -23, -79, -42, 68, 95, -34, 4, -54, -69, -23, -47, -23, 99, 109, -5, 16, 100, -28, 50, 89, -60, -90, -43, -7, 1, -42, 20, 18, 108, -18, -15, 33, -93, 35, 107, 89, -35, -25, -15, 66, -47, -76, 71, 6, -109, 7, -77, -58, -13, 5, -82, -77, 51, 28, 92, 95, -115, -72, -30, -3, 81, 10, -71, 92, 52, 83, 30, 102, 66, -96, 95, 57, 43, -69, -74, 8, 78, -71, -61, -67, -45, 71, 22, -58, -66, -73, 66, 83, -39, 25, -83, -57, -23, 11, -89, -53, -74, 21, -23, -19, -80, -107, -24, 70, -39, -96, 86, -75, 33, -87, -107, 2, 39, -39, 35, -59, -115, -36, 68, -88, -49, 37, 17, 43, -69, -36, -94, -7, -95, 84, 104, -60, -48, 93, -86, -95, 58, 28, -37, 35, -82, -51, -95, 18, 86, -35, -96, 5, -17, 59, 35, 108, -51, -6, 56, 6, 71, 74, 21, 76, 106, -63, 25, 54, -22, -16, 72, -56, -34, -87, 28, -82, 107, -37, 20, 91, 40, -46, 21, 35, 26, -51, 
  89, -89, 34, 101, 99, 34, 42, 52, -28, 99, -11, 103, -22, 51, -62, -84, -23, -50, -55, 106, 89, -52, -43, 3, -9, 108, -23, 41, -86, -10, 36, 105, 26, -76, -26, -90, -4, 39, 74, -21, -7, 34, 117, 109, 40, 4, 32, -82, -46, 61, -65, -13, -8, 21, -18, -53, -83, 84, 78, -96, -55, -22, 57, -60, 65, 33, 38, -31, -42, 116, -51, 22, -6, 52, 3, 32, -27, 63, -39, 60, 106, -87, 71, 1, 40, -86, 48, 59, 79, -31, -12, -76, 19, -44, -72, -39, -20, -77, 9, 107, -21, 65, 9, -79, -9, -21, -35, -84, 109, -26, -54, -69, 28, 51, 100, -31, 81, -4, -28, 44, -19, 38, -6, -71, 50, 43, -55, -73, -15, -3, 70, -2, -8, 27, -64, 75, -9, -18, 20, 1, -9, 73, 69, 86, 51, 74, 0, -62, 78, 25, 68, -32, 13, 72, 72, 31, -27, 23, -13, -20, -2, -82, 37, -8, -14, -22, -92, 43, -83, -13, 64, -22, -27, 15, -75, 66, -49, -87, -41, -11, 5, 93, -27, -43, -65, 21, 59, 84, 105, 11, -90, -24, 72, 101, -39, 48, 102, 70, -40, 48, -46, 5, -49, 19, -3, 97, -15, -50, -28, -14, -7, -48, -91, 8, 25, 42, 111, -90, -14, 85, -20, 24, 23, 76, 24, -30, -26, -11, -65, 53, 37, -50, -90, 85, 12, 36, 36, 66, 97, 60, 72, 31, -34, -3, 62, -18, -82, 16, -93, 97, -7, 74, -26, 60, 69, -80, -26, 93, -59, 77, -66, 52, 76, -37, -75, -9, 90, 41, 29, -65, 44, 23, -44, -37, 68, -91, -89, 74, -28, -69, 8, 85, 65, -20, 93, 42, -36, -36, 80, 6, 78, 109, -77, 21, -25, 18, 28, 80, -81, 16, -44, -87, 93, -34, 94, 27, 31, 86, 32, -56, -20, 37, 95, 111, -91, -82, 100, 25, -64, 44, 78, 89, 36, -53, -74, -80, -65, -57, 31, -71, 66, -44, -18, 85, 75, 70, 17, 68, 39, 77, 100, -47, 52, 62, 26, 4, 36, 5, 4, -4, 61, -33, 101, 37, -63, -30, -82, 1, -32, -22, 74, 86, 93, -10, -13, 53, -85, 71, -15, 72, 74, -6, 46, -73, -69, 
  56, 98, 61, -17, -88, 63, -12, -60, -8, -16, 7, 62, 59, -37, 16, -44, 42, -47, 101, 21, 93, 69, 91, 42, 63, 65, 73, -9, 84, -89, 57, -97, -15, -1, -84, -29, -89, 86, -68, 10, -51, -53, -92, -39, -89, 30, -36, -13, -53, 31, -94, -100, 101, -64, 52, 49, 14, 48, -10, -38, 65, -23, 86, -41, 6, -97, 88, 73, 63, -52, -43, -31, 17, -82, -32, -91, -74, -46, -57, 86, -50, -59, -79, -47, 86, 22, -5, 36, 58, 56, 0, -92, -92, -23, 78, -7, 93, 24, 45, -56, -71, -62, -46, 45, 11, 73, -26, 12, 26, -10, -46, 67, 18, 46, 80, 94, 34, -64, 84, -26, 71, 81, 5, -31, 53, -94, 18, 99, -92, 77, -92, 80, -103, -29, -71, -2, -74, 90, 25, 87, 86, -6, 70, -56, -83, 13, 43, -70, -92, -60, 90, 57, -54, -69, -49, 60, -100, -95, 57, -18, 60, 10, 16, -80, -26, -95, -87, 30, 24, 22, 86, -12, 16, 80, 87, -43, 80, -31, -103, 39, -88, -35, -73, -33, 0, 43, -76, -40, -91, 54, 52, 46, 2, 57, -81, 46, -12, -42, -92, 80, 72, 34, -33, -29, 29, -28, 13, -91, 83, 47, 95, -66, -74, -40, 83, 28, 93, -97, -97, 54, 76, 54, 14, -36, -51, -93, -68, -97, 63, -66, 37, -8, -47, -62, 33, -16, -22, -4, 50, 63, -10, 0, 93, -6, 73, -69, 7, 46, 86, 38, 27, -58, 86, 98, -60, 43, -92, 37, 85, 46, 47, 81, -16, -43, 69, 28, -50, -80, -99, -18, 97, 9, 10, 24, 68, 29, -73, 60, -95, -21, -60, 76, -36, -86, 99, 66, 15, -6, -79, -101, 47, 10, 97, 91, 8, 62, 43, -35, -88, 94, 32, 4, 23, -4, -57, -52, -103, 45, -47, -70, -52, -73, 38, 45, -79, -8, -90, -78, -46, -89, 79, -33, 81, 3, -10, 28, -79, 15, 24, -90, 31, 2, 48, 28, -102, -15, 43, -14, -97, -45, 94, -35, -72, -55, 43, 22, -51, 58, -7, 42, 38, 88, 40, -12, 70, 28, -95, -70, -60, -97, 75, 21, -63, 38, 23, 57, 92, -33, -17, 76, -102, -17, -3, 17, -39, 
  -109, 44, -83, -31, -62, 64, -117, -3, -52, -127, -90, -67, -127, -29, -62, 56, -13, 63, 48, -67, -18, 41, 18, 99, 79, 67, 9, 6, -5, 50, -69, -31, -71, -27, 69, 35, 45, 75, -11, -9, 21, 46, -79, 22, -40, -126, 64, 45, 64, -82, 56, 73, -101, -93, -85, 16, 61, -13, -95, 35, -115, -58, -67, 53, -1, -20, -120, -31, -67, 18, -67, 71, 64, 0, -15, -101, 92, -25, -126, 68, 55, 74, -89, -54, -97, 76, -67, -79, 47, 22, 57, 37, -25, -37, 9, 97, -27, -97, -75, -70, 61, -75, -112, -39, 18, -29, -105, -43, 17, 35, 52, -80, -46, -42, 63, 65, 84, 32, 66, 54, 57, -102, -46, 64, -58, 50, 48, -36, -48, 16, -49, -56, -61, -31, -83, 22, 87, 1, -8, -103, 82, -94, 35, -1, -13, 35, 97, -33, -103, -6, -125, -96, -47, -103, 85, -83, -107, 48, -85, -44, -25, -98, 20, 39, 7, -126, -41, -48, -31, -65, 23, 48, 64, -30, -118, -64, 10, -98, 71, -16, -127, -6, 58, 52, 43, -68, 75, 69, -18, -28, 6, -51, -69, 94, 19, -111, -43, -31, -122, -20, 55, 2, -69, -25, 16, 60, 76, -101, 78, 2, -19, -9, 21, 57, 20, -23, 31, 86, 66, -1, 20, 35, -122, -102, -61, -82, -8, -31, -17, 34, -78, -37, -32, 26, -78, 0, 98, -121, -40, -86, -58, 27, 54, -90, 48, 30, -47, -25, 32, 76, -37, 43, -31, -49, 49, -125, -68, 103, 67, -70, 96, 70, 56, -49, 56, -42, -4, 65, -25, 19, -68, -40, 102, 51, 24, -75, 11, 29, 90, 58, -101, 6, -36, 4, 29, -96, -80, 103, -32, 9, 25, -73, 6, 53, -57, -92, -69, -101, -55, -88, 68, -102, 59, -105, 44, 10, -96, -83, -12, 14, -5, 35, 19, 62, -1, -74, -7, -55, -90, -58, -44, -35, -41, 24, 30, 1, 30, -19, 50, 50, -73, -57, 16, -80, 29, 76, -66, -14, 34, 12, 38, -64, -53, 25, -47, 15, 50, -23, -96, -87, -22, -105, 87, -51, 5, -28, -37, 40, 26, 53, 2, -13, 31, -80, 32, -36, 59, 52, 79, -91, -58, -84, -71, -95, -4, 
  121, 38, 54, -75, -67, -33, 83, 30, 1, 57, -63, 38, 51, -65, 56, -36, 12, 7, 60, 36, -79, 71, -80, 87, 107, -4, -41, -9, 87, 77, -75, -67, -73, 1, 116, 97, -6, -66, -72, 52, 53, -5, 28, -18, -26, 94, 21, -89, 83, 53, -24, -40, -6, 1, 96, 104, -59, -20, 37, -9, 50, 49, 73, 91, 39, -92, -68, 59, 54, 52, 93, 19, 0, -28, 6, 114, 42, -57, 70, 115, -35, -47, 44, -61, -21, 82, -28, 50, -25, -45, 21, 109, 55, -31, -1, 13, -33, 50, -83, 71, 99, 70, 71, 56, 57, -25, 16, -84, 100, 22, -17, 26, 48, 56, -74, 28, -23, 110, -24, -51, -27, -72, -54, -53, 98, 55, -51, 36, 55, -68, 79, -35, -55, -82, 39, 54, 1, -85, 116, 74, -34, -51, -33, 35, 5, -84, -3, -14, 55, -34, 20, 68, 57, 111, -43, -48, -19, 26, -9, 25, 96, -81, 102, 49, -1, 32, 38, -55, 17, 23, 73, -14, -38, -85, 100, 98, 41, 28, 48, 101, 52, -77, 50, -59, -5, 71, -64, 67, 106, 31, -58, -92, 91, -87, 12, 62, -11, -47, -74, -4, 37, 101, 52, -35, -5, 72, 34, 78, 48, -12, 22, -34, 84, 60, 37, -54, -46, 109, 37, 13, 9, 2, -12, -66, -14, 48, 99, 30, -22, 91, -27, -52, 7, 69, -70, 62, 45, -41, 24, 25, -13, 68, -54, 4, 80, 5, -41, 63, -46, 126, 51, -40, -70, 112, -19, 101, 8, 8, -16, 8, -88, -44, 15, 69, 80, 55, -17, 42, -53, -46, 99, 89, -83, 36, 67, 15, 31, 59, 89, 11, 24, 68, -4, 41, 39, -35, 11, 80, 111, 72, -75, 17, -33, -84, -67, 88, 65, 123, 61, 36, -20, 102, 0, 65, -21, 58, 90, -31, 13, 50, 88, -42, -20, 31, 53, -12, -44, 56, 33, -15, 23, 76, -22, 63, 79, 63, -73, 26, -60, 82, -74, 38, -78, -38, -22, 24, -40, -34, 62, 124, -17, -31, -49, -85, 23, 24, 81, 90, 95, 109, -31, 50, -4, -93, 123, 30, -36, 45, 18, 21, 69, -39, -87, 110, -51, -12, -56, -80, -84, -69, 11, -21, 27, 28, 24, 
  -1, 29, 84, -18, -84, -98, 114, -46, 68, -11, 82, 87, 78, 88, -45, 59, -48, -43, 105, -3, -30, -9, 92, -3, 44, 35, 58, 62, 97, 33, 4, -27, -3, -29, 22, -30, -58, 20, 20, 67, 39, 67, 101, -21, -60, -19, 17, 40, -76, -14, -83, 81, 26, 28, 106, 53, 44, -6, 6, -89, 90, 49, -10, -15, 67, 54, 79, -31, -27, -11, -84, -3, -45, -67, 75, 41, 39, 75, 57, 12, 39, 105, -91, -62, -83, -97, -73, 61, -18, 59, 64, -86, -106, -64, 14, 23, 58, 62, -24, -15, -18, -13, 90, 66, 56, 52, 5, 93, 12, -92, -28, 34, 36, 25, -80, -72, -101, 21, 58, 29, 114, 86, 0, -8, -13, -34, -41, -83, 95, 88, -68, 54, 55, -26, -96, 34, -81, 70, -37, 52, -15, 26, -21, 37, 80, -98, -4, -28, -76, -59, 84, -64, -18, 21, -20, 30, 63, 97, -14, -10, 87, -36, 20, 47, -96, 57, -46, -69, 79, 14, 29, 19, 79, -52, 100, -4, 88, 115, -26, 78, -23, 82, 41, 85, -75, 27, 15, 33, 85, 85, -93, -37, 2, -106, -46, 95, 54, 57, -81, -56, -26, -68, 84, -75, -62, 43, -69, -66, -10, -13, -25, -14, -88, 32, -26, -64, -14, -39, -15, 88, 0, 74, -31, -44, 38, 19, 26, -55, 44, -106, -84, -55, 29, -9, 43, -7, 22, 77, -12, -14, 42, -84, -71, 54, -13, -25, 10, 36, -10, 45, 54, -60, 27, -32, -91, -42, 50, 38, 108, -17, -47, -15, 12, -89, -3, -49, 4, 39, -36, 67, -78, -21, 88, 10, -51, -9, 70, -61, 57, 58, 41, -11, 82, -28, 32, -26, -83, -26, 66, -16, -19, 2, -83, -82, -55, -24, 59, 110, 13, 36, 16, -39, 2, 115, 80, 93, -10, -41, 84, 51, 35, 95, 27, -18, -97, 77, 3, 62, -31, 85, -46, 52, 52, 36, 38, 71, 94, 47, -100, -55, -63, 3, 70, -53, -20, -66, 0, 44, 65, -19, -35, 45, -26, -15, 39, 111, -54, 17, 102, 27, 68, 62, -26, 61, -25, -2, 50, 50, 6, -10, -17, -82, 23, -25, 12, 15, 1, 30, -40, -13, 26, 92, -21, 47, 91, 
  -45, -100, -3, -31, 59, -92, -59, -102, -86, 51, -26, -98, 27, 52, -39, 77, 10, -38, 87, -30, 44, 59, -67, 60, 53, -35, 4, -47, 83, -31, -42, 22, -102, 93, 60, 60, 84, -70, -90, -62, -15, 12, -81, -53, -106, -39, 91, 54, -13, 99, 64, -89, -105, 15, -65, -103, -73, 33, -22, 41, -32, -76, -82, 69, 14, 22, 69, 36, 5, 72, -3, -52, 48, 63, 24, -99, -43, 74, -86, -91, 13, 46, 84, 62, 97, 75, -97, -57, 1, 58, -71, 89, 17, 19, -73, -96, 38, 7, 62, -22, -72, 56, 51, 30, -6, -83, -10, 78, 53, 13, -9, -32, 1, -54, -67, 13, -53, -32, 88, 50, 60, -13, 32, -53, 31, 37, -100, 53, -60, 88, -9, 51, 84, -9, 28, 96, 52, -9, 81, 100, 60, 23, 78, -30, -38, -32, -104, 73, -35, -106, 25, -77, -9, 34, -10, 95, -71, 55, -42, -47, 72, -35, -100, -43, -78, -97, -5, 98, -44, -59, 84, -63, -97, 31, 45, 57, -47, 21, -51, -105, -78, -28, -40, -14, 75, -79, -62, -90, -60, -74, -11, 95, 18, 59, -56, 97, -33, 26, -56, -54, 11, 51, -72, 82, 8, -94, 17, 101, 15, -13, 49, -99, -56, 62, 88, 69, 72, -52, -40, -34, 38, 94, 0, -34, 71, 91, 66, -34, -79, 49, 20, -37, 22, 52, -46, -71, 22, 13, -83, 44, -74, 54, 93, -86, -96, 22, 63, -69, -63, 63, -96, 63, -80, 72, 45, -99, -54, 96, -8, 64, 28, 77, 86, 52, -8, -79, -48, -89, -15, -105, 86, 35, -66, -100, -51, 84, 20, -15, 6, -33, 4, -30, 98, -68, -31, -3, -37, 17, 55, -105, 11, 5, 3, 2, 92, -84, 18, -25, 75, -76, 94, 76, 41, 53, -3, -37, -57, -45, 86, 83, -6, 83, -19, 36, -51, 92, -15, -30, -25, 91, -105, -63, -9, 72, -6, 79, 84, 32, -70, -5, -18, 88, -104, 19, 22, -92, 72, 95, 87, -87, -7, -59, 103, -93, -23, 17, 95, -93, -84, 39, 35, 69, 24, 20, -36, 17, -33, -14, 98, -86, 48, -105, -50, 85, 19, 50, -5, 80, -42, -49, -67, -16, -84, 28, -27, 
  22, -100, -58, -8, 93, 97, -88, 97, -16, 22, 22, 25, 88, 30, -22, -75, -100, -19, -85, -36, -81, -83, -3, -36, -46, -100, -71, 85, -15, 5, 29, -97, -78, -101, -12, 23, 44, -5, 80, -34, 97, 48, 82, -72, 83, -52, -3, 55, 100, 64, 31, 45, -73, -51, 90, -38, 15, 68, 53, -20, -2, -33, -19, -81, 69, 76, 80, 83, 17, 94, -83, -22, 62, -17, 46, -77, -53, -49, 46, -57, -44, 43, -28, -37, 53, 18, 71, 85, -3, -103, 5, 24, -72, 53, -95, -76, -47, 98, -1, -54, 20, 87, 23, -73, -65, 41, 3, -13, -31, 45, 62, -95, -60, 28, -69, 57, 53, -60, 61, -91, -6, -36, -49, -36, 94, 16, -84, 81, 35, 84, -82, -82, 25, -1, -87, -96, 47, -40, -50, 85, 84, -17, 59, -101, -32, 72, 43, -57, 58, 92, -42, -74, -82, -81, -13, 88, -61, -14, 61, -46, -20, 66, 49, 24, 7, 6, 67, -90, -78, -33, 88, -42, 38, 26, -31, -80, 21, 72, -14, 1, 54, -72, -58, 16, 32, 31, -95, 8, 97, 62, -19, -104, 38, 59, -30, 13, -82, -22, 53, -101, -57, 3, 25, 48, 77, 34, 31, -56, -39, 58, 18, 102, 29, -71, -66, 84, -36, -32, -34, 91, -79, 90, 45, 89, -25, 34, -97, 40, 91, 98, -78, -8, 68, 4, -42, -99, -90, -86, -6, 50, 21, -50, -72, 19, -71, 69, -85, -17, -25, 95, 80, -54, -86, 73, -105, -76, 22, -89, 0, -24, -60, 82, -46, -18, -76, -5, -62, 31, 93, -89, -25, 20, -80, 21, 92, -40, -4, -38, -34, -40, 43, 82, -41, -49, 85, 50, 26, 64, 54, -21, -18, -98, -27, 86, 42, 69, 2, 33, 72, -38, 53, 85, -81, 6, -82, -51, 27, 51, 61, 46, -89, 94, -69, 69, -31, -69, 41, -66, -49, -5, -74, -54, -89, 79, 69, -15, -32, -62, 23, 29, 11, -47, -21, -97, -65, -97, 6, 3, 40, 89, 58, 7, -13, 82, -55, 4, 75, -34, -58, -55, 75, -47, -71, -19, -28, -52, 60, -24, -36, -74, 53, -98, -26, 67, -69, -95, 84, -17, -35, -73, 94, -5, 16, -74, -31, 
  108, -76, -45, 35, 17, -51, -31, 45, 58, 49, 109, -91, -73, 109, -90, -25, -80, 23, 72, -70, 96, 114, -41, 84, -81, -50, -5, -69, 91, -18, 117, -45, -37, 78, -5, -58, -67, 34, 91, -80, -92, 93, -83, 76, -6, 77, -28, -56, -84, -33, -10, 60, 43, -8, -62, -56, 102, -10, 99, -48, 21, 53, -52, 107, 25, 102, 102, 74, -8, 68, 21, -53, 107, -31, 98, 63, -33, 36, 12, 19, 64, 26, -59, -38, 33, -71, 87, 23, -74, 30, -32, 42, -6, 72, -77, 7, 94, 90, 92, 118, -84, 104, -52, 85, -75, -22, 73, -81, -26, -50, -36, 12, 109, 64, -79, 72, 110, -72, 87, 94, -38, -3, -1, -46, -61, -70, 8, 107, 103, -53, -25, -51, 11, 8, 79, 68, 104, 57, -71, 92, -23, 53, -22, -42, 86, 79, 47, -48, 69, 84, -17, -63, 88, 81, 65, -47, -17, 69, -19, -71, 47, 71, 18, 0, -72, -37, 50, 37, 86, -40, 72, 64, -33, -44, -71, 63, 103, 75, 44, 70, -85, -59, -67, 14, 41, 40, 30, 44, 103, 48, -73, 18, -24, 98, -18, -11, -79, 29, 82, 83, 102, -88, 92, -37, -86, 69, -84, -22, 8, 52, 48, 70, -29, -8, -9, 86, -33, -86, -90, 37, 13, 106, -36, 65, 74, 107, -8, -8, -35, -11, 78, 86, -30, 0, -40, -48, 13, 106, -74, -27, -19, 70, 99, -11, -4, -70, -77, 24, 16, 2, 17, -50, -29, 32, 25, -50, 52, -23, -69, 38, 88, -76, 94, -15, 8, 30, -34, -59, -18, 67, 86, -54, 106, 112, 113, -48, 19, -51, 101, -55, -1, 1, -58, 59, 75, 65, -75, 14, -29, -34, -63, -6, 64, -76, -19, 30, 110, -22, -88, -35, -11, 60, 76, -86, 37, -44, -3, 74, -53, 28, 33, -28, 96, 0, -93, -14, -28, 111, -31, 51, -30, 107, -84, -11, -79, 71, 34, -80, -31, 64, 20, -36, -86, -27, 10, 57, -22, 1, -26, -52, 114, 46, -73, 69, 22, -22, -23, 2, 113, -13, 54, 7, -17, -32, -75, 78, 91, 115, -42, -88, 25, 96, 61, 8, -46, -40, 42, 104, -36, 63, -68, 63, -24, -67, -14, 
  -5, 76, -78, -101, -106, 26, -17, 6, 35, 29, -16, 37, -62, 38, 46, 74, 7, 43, 31, 50, -95, 81, -94, 43, 19, -9, -47, -42, -30, -58, 22, -46, -38, 49, -18, 20, -5, -105, 24, 86, 49, -51, 25, -83, 70, -68, -102, -27, -79, 60, 41, -13, 62, 85, 36, -68, 87, 40, -84, 84, -2, -74, 17, -49, 6, 40, 11, -71, 7, 61, -98, 82, 78, 78, 40, 69, -53, 21, 81, 28, -73, -65, 3, 94, 98, 68, 8, 48, 48, 100, -8, 91, 19, 60, 87, 70, -89, 40, 52, 42, 67, 87, 93, -41, 67, -69, 5, 39, 96, -69, 29, -91, -110, 16, 55, -75, -37, -94, -14, -13, -59, 10, -15, -41, 28, -26, -65, -58, -31, -81, -29, -32, 16, 76, -70, -46, -66, -32, 8, 5, -56, 25, -52, -9, 79, 7, 95, 7, -18, -81, 46, -46, -44, 75, 52, 39, -54, 59, -53, -89, -67, 95, -87, 48, 6, -35, -99, 65, 60, -1, -23, -54, -66, -69, 50, 89, -14, -103, -98, -26, 98, -53, -70, -61, -38, 19, -20, -50, 1, -105, -97, 59, 26, -97, 50, -87, -96, -85, 23, 31, 76, 82, -25, -33, 73, -15, 43, 69, -73, -93, -15, -68, -43, 82, -37, 82, 66, 41, 1, -73, -62, -88, 7, 50, -58, 7, 39, 14, -29, -15, 10, -31, 84, -87, -47, -77, -81, -60, 37, 39, -65, 65, -105, 19, -95, 19, 7, -61, 61, 16, -28, -80, 50, 52, -102, 4, 84, 48, -63, -97, -76, -31, 35, 95, 59, -103, 28, 79, -13, 8, -62, 4, -27, -27, -9, 10, 26, -58, -57, 2, -68, 39, -84, 68, -55, -26, -76, 74, 1, -65, 89, 24, 14, -69, -105, -73, -91, -92, -44, 64, 34, -12, 83, -94, 68, -4, 49, -37, 4, 96, -85, -38, -34, 19, -69, -97, 72, -69, 84, 93, 50, 68, -64, -96, 28, 34, 30, -86, -105, -3, 38, 5, -68, 39, -61, -95, 17, -77, 93, 62, -35, 31, -74, -68, 8, -53, -65, -94, 19, -61, 91, -70, -32, -53, 74, -53, -39, -40, -18, 41, -88, 31, 47, 69, 84, -14, -65, 38, -30, 28, 80, -24, -21, 18, -41, 
  1, -66, -41, -7, 83, -24, -34, -74, 37, -90, -89, -32, 24, 50, -35, 37, -81, -51, 44, -33, -86, -59, 39, -44, 42, -34, -18, 78, -72, 74, 37, -1, 79, -61, -31, -54, 30, -88, -46, 4, 0, -17, 17, 74, -12, -82, 79, -94, -8, -41, 8, -13, -19, -75, -14, -97, -15, -21, 66, -72, -66, 88, -59, 6, -72, 46, 2, -38, -2, 97, -84, -21, -53, 88, 76, 54, -48, 28, -61, 20, 22, 91, -103, -33, -7, 68, 5, -63, 96, -25, 12, 99, 95, 17, 16, -49, 9, -31, 90, -48, -15, -14, -18, -14, 90, 73, 48, 96, -17, -60, 57, 25, 71, -95, -93, 35, -29, 91, -59, -87, 50, -15, -62, -11, 96, 20, -11, -90, 92, 91, -18, 82, -15, 22, -71, 2, 68, -72, 95, -92, 84, -25, 58, -41, -53, 33, 96, 62, -4, 15, -56, -18, 72, 45, -5, -47, 48, 87, -71, -28, -93, 34, -21, 77, 73, -60, 85, -96, -26, 19, 45, -22, 43, 72, 39, -28, 46, 73, -102, 89, 73, -46, -91, 45, 93, -53, -67, 58, -100, 47, 99, -94, -73, 93, 98, 63, 24, -55, -33, 27, -61, 58, -75, -39, 87, 41, -92, -14, -66, -41, -84, 100, 61, 11, -43, -68, 85, -4, 71, 28, -89, -12, 91, -94, -9, -2, 59, -37, -68, 11, -100, -97, 74, -74, 22, 16, 94, 50, 88, 91, -55, -87, -63, -101, -68, -58, -17, -31, 45, 31, -25, 52, -90, -51, -48, -1, 44, 9, -96, 102, 61, -17, -9, 8, 2, 56, 0, -43, -93, -58, -59, 38, -50, -19, -91, -92, -81, -95, -47, -29, -81, -78, -14, 87, 25, 48, 8, -69, 5, 81, -24, -96, 9, -38, -15, -19, -74, 93, -58, -38, 95, 12, 31, 63, 25, 16, 13, 19, -87, 17, 65, -44, 29, -71, 65, 7, -29, -38, -4, 97, 85, -37, 67, -67, 67, -49, -9, -14, -51, -92, 84, 75, -31, 16, 51, 0, 70, 36, 48, 54, 63, 26, -92, 11, -36, 32, 101, -31, 57, -43, -15, 8, -44, 84, -64, -9, 91, -95, -84, -57, -17, -49, -24, -86, -32, 12, 77, -71, -50, -15, 59, -15, 97, -45, 98, 
  -16, 41, 85, 76, 65, -38, -36, 76, 29, -10, -46, 93, -33, 63, -80, -31, -81, 20, 98, -65, 48, -40, -85, 94, -52, -89, -58, 36, -17, -66, -10, -87, -3, 29, -1, 94, 101, -64, 65, -82, -107, -36, 106, -41, 24, -64, -1, 91, -74, 40, -54, -55, 85, 47, 33, -86, 70, -86, -32, -55, 34, -89, 43, 100, -31, 48, -8, -7, 27, -25, 69, -44, 69, 83, 41, 28, -92, -82, 78, -89, -89, -90, -100, 11, 57, 85, -46, 27, 13, 39, 2, 89, -101, -49, 64, 47, 47, -46, 85, -90, 79, 35, 11, -72, -65, -100, -92, 89, 31, -111, -99, -44, 69, -3, -66, 21, 64, 104, -61, -21, -58, 83, 20, 94, -8, 37, 50, 77, 89, 93, 43, 38, -59, 70, 1, -18, 87, 54, 26, -32, -108, -90, -104, 64, 56, -12, 23, 46, 77, -12, 53, 75, -106, -70, 20, -34, -18, 29, 35, -47, -90, -99, -95, -16, 77, 78, -101, -55, 88, 10, -105, -28, 61, 70, 81, 72, 15, 19, -44, 71, 106, 78, 85, -41, -98, 41, 94, -35, 11, -77, 56, 75, 3, 85, 80, -77, 21, 77, 47, -63, -8, -47, 5, -72, 31, -56, 32, -27, 38, -50, -81, -20, -16, 6, -27, 48, -45, -93, 14, -92, -33, -35, -12, -46, -78, -8, -17, -69, -98, 6, 76, -15, 50, 36, 51, -25, 6, 54, 37, -65, 101, -97, -41, -93, -62, -12, 79, 48, 88, -26, 24, 70, -70, -51, 31, -57, -102, 11, -63, 90, 88, 101, -23, 39, -5, -56, -89, 19, -63, -50, 85, -58, 58, -80, 84, 27, 87, 27, 37, 59, -27, -17, -60, -18, -70, 50, -75, -86, 35, -27, -65, 33, -105, -15, 37, -90, -30, -20, -96, 65, 33, 11, 47, -33, -40, 17, -95, -25, 7, -18, 15, -107, 54, 35, -97, 41, -86, -15, 35, 21, -86, -75, 40, -90, 37, -30, -108, 54, 85, 52, -100, -32, -14, 17, -74, 30, 45, -18, -91, 106, 62, 33, -48, 27, -74, 55, 6, -18, 14, -55, 17, 65, 89, -52, -75, 80, -27, -34, 65, -81, -97, 33, -32, -99, 69, -43, 79, -62, -6, 91, -29, 44, -69, 28, 30, 
  -101, -24, 55, -115, 52, 10, -82, -7, -2, -51, -92, -38, -102, -70, -75, -68, 9, -59, -71, 42, -50, 70, -53, 81, -59, -87, -3, -44, -89, -70, 32, -42, -64, -107, 103, 82, 13, -67, -78, -49, -72, 22, -76, 55, 4, -31, 105, 24, -96, -92, 7, -102, 48, -58, 50, -70, -66, -79, -26, 74, -47, -51, -66, 65, 53, -52, 74, -81, 6, 75, 66, 57, 62, -44, -95, 16, 94, 19, -45, 37, 30, 28, 91, -2, 34, 20, 88, -5, -3, -81, -112, 83, 66, -48, -71, -73, 41, 25, 97, -78, -100, 102, 9, 12, -50, -13, -50, -72, -10, 59, -69, -3, -99, -53, -72, -74, 47, 27, -87, -90, 73, -54, -26, 3, 31, 99, -37, -40, 7, -7, -88, -45, -12, -4, -14, -70, 29, 100, -58, 33, 73, -46, -12, -41, 70, 78, 26, 18, -15, -24, -20, 41, 84, 30, 1, -50, 34, -39, 98, -30, 30, -44, 22, -80, -30, -103, -40, 104, -23, 64, 84, -91, 99, 76, -25, 53, -62, -65, 74, 65, 30, -39, -91, 76, 82, -76, -108, -58, -13, -4, -2, 14, -45, -39, 20, -54, -39, -43, 45, -75, 66, -95, -34, 42, -33, -47, -62, 7, -23, -67, -8, 12, 79, 79, -48, 25, 62, 83, -12, 78, -52, 79, -36, 95, -19, 60, -69, 46, -25, -32, 28, -39, 68, -87, -5, -87, -49, -7, 57, -88, 3, -28, -6, -22, -38, 18, 6, -44, 4, -28, -22, 97, 50, -83, -55, -43, 102, -99, -17, 50, -52, 49, 81, -90, -112, 78, 5, 54, -77, 64, 77, -74, -31, 10, -32, -25, -102, -73, 68, -5, 103, 5, -40, 50, -87, -99, -11, -14, 13, 71, 8, -89, -15, 13, -36, -17, 0, 4, -87, 43, -55, 91, 100, 59, 20, -66, -92, 35, 7, -16, -37, 78, -13, 72, -33, 63, -28, 83, -10, -1, 3, 38, 23, 61, 23, -53, 17, 7, 97, 30, 58, 91, 36, -32, -96, -49, 55, 68, 56, 69, -36, -100, -102, 32, -89, 39, 11, -12, -106, -12, 24, -118, -70, 58, -62, 41, 100, -77, 92, 20, -21, 57, 45, -95, -56, -71, 11, -53, 28, 84, -2, 20, -59, -3, -24, 
  -11, 84, -2, -58, -10, -41, 23, -6, 66, 62, -75, 74, 63, 6, -9, -49, 5, -93, -62, 35, -46, -101, 88, -88, -14, 10, -74, -51, 44, 74, -79, 23, 79, -71, 16, 28, -101, 30, -1, -21, -60, -78, 19, 65, -7, -90, -88, 20, -17, 11, 19, 40, -79, 27, 40, -45, 47, -93, -61, 78, -87, 76, -82, 29, -70, -19, -24, -62, -81, -68, -91, 60, -38, -7, -30, 27, -78, -108, -97, -38, 71, -15, 5, -94, -28, 44, 83, -18, 37, -6, -103, 24, -77, -30, 38, -92, -75, -65, 95, -68, -24, 70, 62, -71, -26, 57, -89, -79, -15, 68, 95, 69, -79, -72, 38, 21, -17, -65, -39, -15, 94, 22, 37, -59, 37, 59, -99, 8, -60, -7, -65, -6, 74, 65, 5, 93, 55, 73, -62, -34, 32, -73, 43, 20, -6, 87, -80, 72, -15, 31, -108, 59, -30, -45, 13, -101, -88, -12, -10, 47, -73, -106, 71, -24, 21, -90, 73, 51, 77, -58, -46, 56, 43, -33, 9, 65, -87, -3, -59, -42, 15, -62, -42, -20, -32, 27, -81, -20, -43, 78, -28, -31, 94, 56, 2, 54, -71, -82, 81, -74, 32, -109, 21, 53, 43, -12, -67, 73, 30, 23, -24, -7, -46, 4, 36, 21, -51, 64, 55, -62, -42, 60, 35, -7, 36, 75, -92, -57, -74, -85, 70, -66, -41, -17, -3, 87, -60, 81, 20, -18, 86, -71, -44, -108, -76, -23, -67, 108, 22, -71, -92, -25, -103, 83, -38, 38, 106, -32, 94, -44, -61, 70, -94, -30, 93, -69, 71, 21, 70, -82, 44, 107, 74, 20, 29, -47, -33, 75, 32, 40, -49, 28, 72, 27, 22, 33, -15, 95, 33, 100, 87, 81, -14, 39, -12, 77, -68, 39, 74, 67, 20, -54, 90, 70, -81, -53, -99, 108, -38, -56, 70, -64, -98, 56, -93, 72, -8, -30, -50, 59, -11, -35, -95, -80, -34, 47, -60, 18, -65, -33, -31, -25, -109, 12, -2, 0, -46, -39, 83, 54, 7, -55, 40, -77, 77, -41, -30, -13, -35, -65, -44, -80, -28, -51, 37, -33, 47, -4, 87, 14, -25, -46, -28, -41, 90, 10, -49, 101, -59, 72, 100, 44, -44, -71, -76, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 20,375 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0011965887388214469, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.18505029380321503, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.13969016075134277, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,5 } };
const TfArray<1, float> quant9_scale = { 1, { 0.14024734497070312, } };
const TfArray<1, int> quant9_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,5 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 375, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 7500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 384), (TfLiteIntArray*)&g0::tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
